// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/providers/crypt.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrypt is a mock of Crypt interface
type MockCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockCryptMockRecorder
}

// MockCryptMockRecorder is the mock recorder for MockCrypt
type MockCryptMockRecorder struct {
	mock *MockCrypt
}

// NewMockCrypt creates a new mock instance
func NewMockCrypt(ctrl *gomock.Controller) *MockCrypt {
	mock := &MockCrypt{ctrl: ctrl}
	mock.recorder = &MockCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypt) EXPECT() *MockCryptMockRecorder {
	return m.recorder
}

// Hash mocks base method
func (m *MockCrypt) Hash(str string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", str)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash
func (mr *MockCryptMockRecorder) Hash(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockCrypt)(nil).Hash), str)
}

// Compare mocks base method
func (m *MockCrypt) Compare(str, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", str, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare
func (mr *MockCryptMockRecorder) Compare(str, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockCrypt)(nil).Compare), str, hash)
}
